name: Schedule scan

on:
  schedule:
    - cron: "0 * * * *"

jobs:
  update-scope:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r engine/requirements.txt

      - name: Run update script
        run: python engine/update.py


      - name: Get latest scope to scan
        id: latest_scope
        run: |
          python engine/get_latest_unscanned_scope.py > tmp_env
          LATEST_SCOPE_ID=$(cat tmp_env | grep "LATEST_SCOPE_ID" | cut -d '=' -f2)
          LATEST_SCOPE_NAME=$(cat tmp_env | grep "LATEST_SCOPE_NAME" | cut -d '=' -f2)
          LATEST_SCOPE_TYPE=$(cat tmp_env | grep "LATEST_SCOPE_TYPE" | cut -d '=' -f2)
          rm -f tmp_env
          if [[ -z "$LATEST_SCOPE_ID" || "$LATEST_SCOPE_ID" == "None" ]]; then
            echo "No valid scope entry found. Skipping Amass scan."
            exit 0
          fi 

          if [[ "$LATEST_SCOPE_TYPE" != "domains" ]]; then
            echo "Skipping Amass scan: The latest scope is not a domain."
            exit 0
          fi

          echo "LATEST_SCOPE_ID=$LATEST_SCOPE_ID" >> $GITHUB_ENV
          echo "LATEST_SCOPE_NAME=$LATEST_SCOPE_NAME" >> $GITHUB_ENV
          echo "LATEST_SCOPE_TYPE=$LATEST_SCOPE_TYPE" >> $GITHUB_ENV


      - name: Run Subfinder (120s)
        if: env.LATEST_SCOPE_NAME != ''
        run: |
          echo "Scanning $LATEST_SCOPE_NAME with Subfinder..."
          timeout 120 docker run --rm projectdiscovery/subfinder -d ${{ env.LATEST_SCOPE_NAME }} -silent | tee subfinder_results.txt || echo "Subfinder timed out!"


      - name: Run Amass (180s Timeout)
        if: env.LATEST_SCOPE_NAME != '' && env.LATEST_SCOPE_TYPE == 'domains'
        run: |
          echo "Scanning $LATEST_SCOPE_NAME with Amass (max 120 seconds)..."
          timeout 180 docker run --rm caffix/amass enum -d ${{ env.LATEST_SCOPE_NAME }} | tee amass_results.txt || echo "Amass timed out!"

      - name: Merge and filter domain data
        if: env.LATEST_SCOPE_NAME != '' && env.LATEST_SCOPE_TYPE == 'domains'
        run: |
           cat subfinder_results.txt amass_results.txt |sort -u > merged_data.tmp
           echo "" > merged_data.txt
           while IFS= read -r line || [[ -n "$line" ]]; do
            echo "$line" | tr -s ' \t' '\n' >> "merged_data.txt"
           done < "merged_data.tmp"
           rm -f merged_data.tmp
           python engine/filter_domains.py ${{ env.LATEST_SCOPE_ID }} merged_data.txt > domains.txt
           python engine/get_all_subdomains.py ${{ env.LATEST_SCOPE_ID }} >> domains.txt
           rm -f merged_data.txt
           rm -f amass_results.txt
           rm -f subfinder_results.txt
           timeout 120 docker run --rm -v "$PWD:/data" projectdiscovery/dnsx -rcode noerror -silent -l /data/domains.txt -o /data/res.txt || echo "Dnsx timed out!"
           cat res.txt | cut -d" " -f1 > domains.txt
           rm -f res.txt
           python engine/add_subdomains.py ${{ env.LATEST_SCOPE_ID }} domains.txt


      - name: Get endpoints 
        if: env.LATEST_SCOPE_NAME != '' && env.LATEST_SCOPE_TYPE == 'domains'
        run: |
          timeout 600 docker run --rm -v "$PWD:/data" projectdiscovery/httpx -l /data/domains.txt -cl -sc -title -wc -silent -json -o /data/httpx.json || echo "Httpx timed out!"
          python engine/httpx_parser.py ${{ env.LATEST_SCOPE_ID }} httpx.json
          rm -f httpx.json
          rm -f domains.txt
          rm -f res.txt

      - name: Publish endpoints
        run: |
           rm -rf storage
           mkdir storage
           python engine/publish.py



      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git pull
          git add -A scope/ storage/ scope_scan.db
          git commit -m "Auto-update: updated with ${{ env.LATEST_SCOPE_NAME }}" || echo "No changes to commit"
          git push
